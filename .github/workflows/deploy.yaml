name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  OVH_ENDPOINT: ${{ secrets.OVH_ENDPOINT }}
  OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
  OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
  OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
  TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  ##############################################################################
  #                                CONTEXT                                     #
  ##############################################################################
  set-context:
    runs-on: ubuntu-latest
    outputs:
      commit_message: ${{ steps.set_tf_dir.outputs.commit_message }}
      tf_dir: ${{ steps.set_tf_dir.outputs.tf_dir }}
    steps:
      - uses: actions/checkout@v4

      - id: set_tf_dir
        run: |
          commit_msg="$(git log -1 --pretty=%B)"
          echo "commit_message=$commit_msg" >> "$GITHUB_OUTPUT"

          if echo "$commit_msg" | grep -q "Docker"; then
            echo "tf_dir=deploy/docker_terraform" >> "$GITHUB_OUTPUT"
          elif echo "$commit_msg" | grep -q "KMS"; then
            echo "tf_dir=deploy/terraform" >> "$GITHUB_OUTPUT"
          else
            echo "tf_dir=" >> "$GITHUB_OUTPUT"
          fi

  ##############################################################################
  #                          terraform PLAN                                    #
  ##############################################################################
  terraform-plan:
    runs-on: ubuntu-latest
    needs: set-context
    if: ${{ needs.set-context.outputs.tf_dir != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init apply
        run: |
          terraform init
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

  ##############################################################################
  #                          terraform APPLY                                   #
  ##############################################################################
  terraform-apply:
    runs-on: ubuntu-latest
    # environment: terraform_holder
    needs: [set-context, terraform-plan]
    if: ${{ needs.set-context.outputs.tf_dir != '' }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init apply
        run: |
          terraform init
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

      - run: terraform apply -auto-approve
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

  ##############################################################################
  #                          kubernetes DEPLOY                                 #
  ##############################################################################
  kube-deploy:
    runs-on: ubuntu-latest
    needs: [set-context, terraform-apply]
    if: ${{ needs.set-context.outputs.tf_dir == 'deploy/terraform' }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

      - name: Extract kubeconfig output
        run: |
          mkdir -p ~/.kube
          terraform output -raw kubeconfig_file_eu_west_par > ~/.kube/config
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup env variables
        run: |
          echo "DB_USERNAME=lucas" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(terraform output -raw user_password)" >> $GITHUB_ENV
          echo "DB_HOST=$(terraform output -raw domain)" >> $GITHUB_ENV
          echo "DB_PORT=$(terraform output -raw port)" >> $GITHUB_ENV
          echo "DB_NAME=defaultdb" >> $GITHUB_ENV
          echo "DB_TYPE=mysql+pymysql" >> $GITHUB_ENV
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

      - name: Deploy to Kubernetes
        shell: bash
        run: |
          envsubst < hello.yaml | kubectl apply -f -
          kubectl rollout restart -n hello-app deployment backend-deployment frontend-deployment
        working-directory: deploy/kubernetes

  ##############################################################################
  #                          Docker DEPLOY                                     #
  ##############################################################################
  docker-deploy:
    runs-on: ubuntu-latest
    needs: [set-context, terraform-apply]
    if: ${{ needs.set-context.outputs.tf_dir == 'deploy/docker_terraform' }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

      - name: Setup env variables
        run: |
          echo "DB_USERNAME=lucas" >> .env
          echo "DB_PASSWORD=$(terraform output -raw user_password)" >> .env
          echo "DB_HOST=$(terraform output -raw domain)" >> .env
          echo "DB_PORT=$(terraform output -raw port)" >> .env
          echo "DB_NAME=defaultdb" >> .env
          echo "DB_TYPE=mysql+pymysql" >> .env

          echo "BASTION=$(terraform output -raw baction_public_ip)" >> $GITHUB_ENV
          echo "INSTANCE_A=$(terraform output -raw instance_a_private_ip)" >> $GITHUB_ENV
          echo "INSTANCE_B=$(terraform output -raw instance_b_private_ip)" >> $GITHUB_ENV
          echo "INSTANCE_C=$(terraform output -raw instance_c_private_ip)" >> $GITHUB_ENV
        working-directory: ${{ needs.set-context.outputs.tf_dir }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $BASTION >> ~/.ssh/known_hosts

      - name: Copy files to bastion
        run: |
          scp ${{ needs.set-context.outputs.tf_dir }}/.env deployer@$BASTION:/home/deployer/.env
          scp ${{ needs.set-context.outputs.tf_dir }}/scripts/nginx_deploy.sh deployer@$BASTION:/home/deployer/nginx_deploy.sh
          scp ${{ needs.set-context.outputs.tf_dir }}/scripts/deploy.sh deployer@$BASTION:/home/deployer/deploy.sh
          scp ${{ needs.set-context.outputs.tf_dir }}/scripts/full_deploy.sh deployer@$BASTION:/home/deployer/full_deploy.sh

      - name: Run full deploy script on bastion
        run: |
          ssh deployer@$BASTION "export INSTANCE_A=${INSTANCE_A} INSTANCE_B=${INSTANCE_B} INSTANCE_C=${INSTANCE_C} && bash /home/deployer/full_deploy.sh"
        env:
          INSTANCE_A: ${{ env.INSTANCE_A }}
          INSTANCE_B: ${{ env.INSTANCE_B }}
          INSTANCE_C: ${{ env.INSTANCE_C }}
